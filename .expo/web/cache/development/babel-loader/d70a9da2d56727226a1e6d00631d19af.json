{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Svg, { Defs, G, Path, Rect, Image, ClipPath, LinearGradient, Stop } from 'react-native-svg';\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar renderLogo = function renderLogo(_ref) {\n  var size = _ref.size,\n      logo = _ref.logo,\n      logoSize = _ref.logoSize,\n      logoBackgroundColor = _ref.logoBackgroundColor,\n      logoMargin = _ref.logoMargin,\n      logoBorderRadius = _ref.logoBorderRadius;\n  var logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  var logoBackgroundSize = logoSize + logoMargin * 2;\n  var logoBackgroundBorderRadius = logoBorderRadius + logoMargin / logoSize * logoBorderRadius;\n  return _jsxs(G, {\n    x: logoPosition,\n    y: logoPosition,\n    children: [_jsxs(Defs, {\n      children: [_jsx(ClipPath, {\n        id: \"clip-logo-background\",\n        children: _jsx(Rect, {\n          width: logoBackgroundSize,\n          height: logoBackgroundSize,\n          rx: logoBackgroundBorderRadius,\n          ry: logoBackgroundBorderRadius\n        })\n      }), _jsx(ClipPath, {\n        id: \"clip-logo\",\n        children: _jsx(Rect, {\n          width: logoSize,\n          height: logoSize,\n          rx: logoBorderRadius,\n          ry: logoBorderRadius\n        })\n      })]\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        width: logoBackgroundSize,\n        height: logoBackgroundSize,\n        fill: logoBackgroundColor,\n        clipPath: \"url(#clip-logo-background)\"\n      })\n    }), _jsx(G, {\n      x: logoMargin,\n      y: logoMargin,\n      children: _jsx(Image, {\n        width: logoSize,\n        height: logoSize,\n        preserveAspectRatio: \"xMidYMid slice\",\n        href: logo,\n        clipPath: \"url(#clip-logo)\"\n      })\n    })]\n  });\n};\n\nvar QRCode = function QRCode(_ref2) {\n  var _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? 'this is a QR code' : _ref2$value,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 100 : _ref2$size,\n      _ref2$color = _ref2.color,\n      color = _ref2$color === void 0 ? 'black' : _ref2$color,\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? 'white' : _ref2$backgroundColor,\n      logo = _ref2.logo,\n      _ref2$logoSize = _ref2.logoSize,\n      logoSize = _ref2$logoSize === void 0 ? size * 0.2 : _ref2$logoSize,\n      _ref2$logoBackgroundC = _ref2.logoBackgroundColor,\n      logoBackgroundColor = _ref2$logoBackgroundC === void 0 ? 'transparent' : _ref2$logoBackgroundC,\n      _ref2$logoMargin = _ref2.logoMargin,\n      logoMargin = _ref2$logoMargin === void 0 ? 2 : _ref2$logoMargin,\n      _ref2$logoBorderRadiu = _ref2.logoBorderRadius,\n      logoBorderRadius = _ref2$logoBorderRadiu === void 0 ? 0 : _ref2$logoBorderRadiu,\n      _ref2$quietZone = _ref2.quietZone,\n      quietZone = _ref2$quietZone === void 0 ? 0 : _ref2$quietZone,\n      _ref2$enableLinearGra = _ref2.enableLinearGradient,\n      enableLinearGradient = _ref2$enableLinearGra === void 0 ? false : _ref2$enableLinearGra,\n      _ref2$gradientDirecti = _ref2.gradientDirection,\n      gradientDirection = _ref2$gradientDirecti === void 0 ? ['0%', '0%', '100%', '100%'] : _ref2$gradientDirecti,\n      _ref2$linearGradient = _ref2.linearGradient,\n      linearGradient = _ref2$linearGradient === void 0 ? ['rgb(255,0,0)', 'rgb(0,255,255)'] : _ref2$linearGradient,\n      _ref2$ecl = _ref2.ecl,\n      ecl = _ref2$ecl === void 0 ? 'M' : _ref2$ecl,\n      getRef = _ref2.getRef,\n      onError = _ref2.onError;\n  var result = useMemo(function () {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n\n  if (!result) {\n    return null;\n  }\n\n  var path = result.path,\n      cellSize = result.cellSize;\n  return _jsxs(Svg, {\n    ref: getRef,\n    viewBox: [-quietZone, -quietZone, size + quietZone * 2, size + quietZone * 2].join(' '),\n    width: size,\n    height: size,\n    children: [_jsx(Defs, {\n      children: _jsxs(LinearGradient, {\n        id: \"grad\",\n        x1: gradientDirection[0],\n        y1: gradientDirection[1],\n        x2: gradientDirection[2],\n        y2: gradientDirection[3],\n        children: [_jsx(Stop, {\n          offset: \"0\",\n          stopColor: linearGradient[0],\n          stopOpacity: \"1\"\n        }), _jsx(Stop, {\n          offset: \"1\",\n          stopColor: linearGradient[1],\n          stopOpacity: \"1\"\n        })]\n      })\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        x: -quietZone,\n        y: -quietZone,\n        width: size + quietZone * 2,\n        height: size + quietZone * 2,\n        fill: backgroundColor\n      })\n    }), _jsx(G, {\n      children: _jsx(Path, {\n        d: path,\n        strokeLinecap: \"butt\",\n        stroke: enableLinearGradient ? 'url(#grad)' : color,\n        strokeWidth: cellSize\n      })\n    }), logo && renderLogo({\n      size: size,\n      logo: logo,\n      logoSize: logoSize,\n      logoBackgroundColor: logoBackgroundColor,\n      logoMargin: logoMargin,\n      logoBorderRadius: logoBorderRadius\n    })]\n  });\n};\n\nexport default QRCode;","map":{"version":3,"sources":["C:/Users/jules/Documents/dotd_final/node_modules/react-native-qrcode-svg/src/index.js"],"names":["React","useMemo","Svg","Defs","G","Path","Rect","Image","ClipPath","LinearGradient","Stop","genMatrix","transformMatrixIntoPath","renderLogo","size","logo","logoSize","logoBackgroundColor","logoMargin","logoBorderRadius","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","QRCode","value","color","backgroundColor","quietZone","enableLinearGradient","gradientDirection","linearGradient","ecl","getRef","onError","result","error","path","cellSize","join"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\r\nimport Svg, {\r\n  Defs,\r\n  G,\r\n  Path,\r\n  Rect,\r\n  Image,\r\n  ClipPath,\r\n  LinearGradient,\r\n  Stop\r\n} from 'react-native-svg'\r\nimport genMatrix from './genMatrix'\r\nimport transformMatrixIntoPath from './transformMatrixIntoPath'\r\n\r\nconst renderLogo = ({\r\n  size,\r\n  logo,\r\n  logoSize,\r\n  logoBackgroundColor,\r\n  logoMargin,\r\n  logoBorderRadius\r\n}) => {\r\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2\r\n  const logoBackgroundSize = logoSize + logoMargin * 2\r\n  const logoBackgroundBorderRadius =\r\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius\r\n\r\n  return (\r\n    <G x={logoPosition} y={logoPosition}>\r\n      <Defs>\r\n        <ClipPath id='clip-logo-background'>\r\n          <Rect\r\n            width={logoBackgroundSize}\r\n            height={logoBackgroundSize}\r\n            rx={logoBackgroundBorderRadius}\r\n            ry={logoBackgroundBorderRadius}\r\n          />\r\n        </ClipPath>\r\n        <ClipPath id='clip-logo'>\r\n          <Rect\r\n            width={logoSize}\r\n            height={logoSize}\r\n            rx={logoBorderRadius}\r\n            ry={logoBorderRadius}\r\n          />\r\n        </ClipPath>\r\n      </Defs>\r\n      <G>\r\n        <Rect\r\n          width={logoBackgroundSize}\r\n          height={logoBackgroundSize}\r\n          fill={logoBackgroundColor}\r\n          clipPath='url(#clip-logo-background)'\r\n        />\r\n      </G>\r\n      <G x={logoMargin} y={logoMargin}>\r\n        <Image\r\n          width={logoSize}\r\n          height={logoSize}\r\n          preserveAspectRatio='xMidYMid slice'\r\n          href={logo}\r\n          clipPath='url(#clip-logo)'\r\n        />\r\n      </G>\r\n    </G>\r\n  )\r\n}\r\n\r\nconst QRCode = ({\r\n  value = 'this is a QR code',\r\n  size = 100,\r\n  color = 'black',\r\n  backgroundColor = 'white',\r\n  logo,\r\n  logoSize = size * 0.2,\r\n  logoBackgroundColor = 'transparent',\r\n  logoMargin = 2,\r\n  logoBorderRadius = 0,\r\n  quietZone = 0,\r\n  enableLinearGradient = false,\r\n  gradientDirection = ['0%', '0%', '100%', '100%'],\r\n  linearGradient = ['rgb(255,0,0)', 'rgb(0,255,255)'],\r\n  ecl = 'M',\r\n  getRef,\r\n  onError\r\n}) => {\r\n  const result = useMemo(() => {\r\n    try {\r\n      return transformMatrixIntoPath(genMatrix(value, ecl), size)\r\n    } catch (error) {\r\n      if (onError && typeof onError === 'function') {\r\n        onError(error)\r\n      } else {\r\n        // Pass the error when no handler presented\r\n        throw error\r\n      }\r\n    }\r\n  }, [value, size, ecl])\r\n\r\n  if (!result) {\r\n    return null\r\n  }\r\n\r\n  const { path, cellSize } = result\r\n\r\n  return (\r\n    <Svg\r\n      ref={getRef}\r\n      viewBox={[\r\n        -quietZone,\r\n        -quietZone,\r\n        size + quietZone * 2,\r\n        size + quietZone * 2\r\n      ].join(' ')}\r\n      width={size}\r\n      height={size}\r\n    >\r\n      <Defs>\r\n        <LinearGradient\r\n          id='grad'\r\n          x1={gradientDirection[0]}\r\n          y1={gradientDirection[1]}\r\n          x2={gradientDirection[2]}\r\n          y2={gradientDirection[3]}\r\n        >\r\n          <Stop offset='0' stopColor={linearGradient[0]} stopOpacity='1' />\r\n          <Stop offset='1' stopColor={linearGradient[1]} stopOpacity='1' />\r\n        </LinearGradient>\r\n      </Defs>\r\n      <G>\r\n        <Rect\r\n          x={-quietZone}\r\n          y={-quietZone}\r\n          width={size + quietZone * 2}\r\n          height={size + quietZone * 2}\r\n          fill={backgroundColor}\r\n        />\r\n      </G>\r\n      <G>\r\n        <Path\r\n          d={path}\r\n          strokeLinecap='butt'\r\n          stroke={enableLinearGradient ? 'url(#grad)' : color}\r\n          strokeWidth={cellSize}\r\n        />\r\n      </G>\r\n      {logo &&\r\n        renderLogo({\r\n          size,\r\n          logo,\r\n          logoSize,\r\n          logoBackgroundColor,\r\n          logoMargin,\r\n          logoBorderRadius\r\n        })}\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default QRCode\r\n"]},"metadata":{},"sourceType":"module"}