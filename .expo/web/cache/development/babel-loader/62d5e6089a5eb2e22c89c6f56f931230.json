{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport * as React from \"react\";\nimport { useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AppContext from \"../components/AppContext\";\nimport useAddUser from \"../hooks/useAddUser\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Login(setLoggedIn) {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      onChangeText = _React$useState2[1];\n\n  var id = React.useContext(AppContext);\n  var isMounted = useRef(false);\n\n  var _useAddUser = useAddUser(),\n      response = _useAddUser.response,\n      PostData = _useAddUser.PostData;\n\n  var checklogin = function checklogin(input) {\n    if (input.includes(\"dotd.tech/card\")) {\n      var ar = input.split(\"?id=\");\n      id == null ? void 0 : id.setId(ar[1]);\n      setLoggedIn(true);\n    } else {\n      alert(\"Not a valid dotd card.\");\n    }\n  };\n\n  function readNdef() {\n    return _regeneratorRuntime.async(function readNdef$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            checklogin(\"dotd.tech/card?id=5\");\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      style: \"auto\",\n      hidden: true\n    }), _jsx(Image, {\n      style: styles.image,\n      source: {\n        uri: \"https://dotdstorage.blob.core.windows.net/logos/login.png\"\n      }\n    }), _jsxs(View, {\n      style: {\n        height: 350,\n        width: 300,\n        marginTop: 30,\n        marginLeft: 40\n      },\n      children: [_jsxs(Text, {\n        style: {\n          color: \"black\",\n          fontSize: 25,\n          marginBottom: 30\n        },\n        children: [\"Discover \", \"\\n\", \"The science of networking.\"]\n      }), _jsx(Text, {\n        style: {\n          color: \"black\",\n          opacity: 50,\n          fontSize: 20,\n          marginBottom: 60\n        },\n        children: \"Click the button below and follow thr instructions to set up the your card.\"\n      }), _jsx(Pressable, {\n        style: {\n          backgroundColor: \"#052846\",\n          borderColor: \"white\",\n          width: 150,\n          height: 40,\n          borderRadius: 10,\n          borderWidth: 1,\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        onPress: readNdef,\n        children: _jsx(Text, {\n          style: {\n            color: \"white\",\n            fontSize: 20\n          },\n          children: \"Let's go\"\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: 1000,\n    backgroundColor: \"white\"\n  },\n  image: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottomLeftRadius: 40,\n    borderBottomRightRadius: 40\n  },\n  input: {\n    backgroundColor: \"#052846\",\n    borderColor: \"white\",\n    width: 300,\n    height: 40,\n    borderRadius: 10,\n    borderWidth: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"white\",\n    padding: 10,\n    marginBottom: 75\n  }\n});","map":{"version":3,"sources":["C:/Users/jules/Documents/dotd_final/screens/Login.tsx"],"names":["StatusBar","React","useRef","AppContext","useAddUser","Login","setLoggedIn","useState","text","onChangeText","id","useContext","isMounted","response","PostData","checklogin","input","includes","ar","split","setId","alert","readNdef","styles","container","image","uri","height","width","marginTop","marginLeft","color","fontSize","marginBottom","opacity","backgroundColor","borderColor","borderRadius","borderWidth","justifyContent","alignItems","StyleSheet","create","flex","borderBottomLeftRadius","borderBottomRightRadius","padding"],"mappings":"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","sourcesContent":["import { useNavigation } from \"@react-navigation/native\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  SafeAreaView,\r\n  Button,\r\n  ImageBackground,\r\n  Pressable,\r\n  TextInput,\r\n  ScrollView,\r\n  Image,\r\n} from \"react-native\";\r\nimport * as Svg from \"react-native-svg\";\r\nimport AppContext from \"../components/AppContext\";\r\nimport useAddUser from \"../hooks/useAddUser\";\r\nimport NfcManager, { NfcTech, Ndef } from \"react-native-nfc-manager\";\r\n\r\ninterface props {\r\n  setter: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport default function Login(\r\n  setLoggedIn: React.Dispatch<React.SetStateAction<boolean>>\r\n) {\r\n  const [text, onChangeText] = React.useState(\"\");\r\n  const id = React.useContext(AppContext);\r\n  const isMounted = useRef(false);\r\n  const { response, PostData } = useAddUser();\r\n  const checklogin = (input: string) => {\r\n    if (input.includes(\"dotd.tech/card\")) {\r\n      let ar = input.split(\"?id=\");\r\n      id?.setId(ar[1]);\r\n      setLoggedIn(true);\r\n    } else {\r\n      alert(\"Not a valid dotd card.\");\r\n    }\r\n  };\r\n\r\n  async function readNdef() {\r\n    // try {\r\n    //   // register for the NFC tag with NDEF in it\r\n    //   await NfcManager.requestTechnology(NfcTech.Ndef);\r\n    //   // the resolved tag object will contain `ndefMessage` property\r\n    //   const tag = await NfcManager.getTag();\r\n    //   //@ts-ignore\r\n    //   // alert('Tag found nieuwe vesries' + JSON.stringify(tag?.ndefMessage.toRecords()));\r\n    //   //@ts-ignore\r\n    //   console.log('Tag Discovered', tag);\r\n\r\n    // let parsed = null;\r\n    // if (tag?.ndefMessage && tag.ndefMessage.length > 0) {\r\n    //     // ndefMessage is actually an array of NdefRecords,\r\n    //     // and we can iterate through each NdefRecord, decode its payload\r\n    //     // according to its TNF & type\r\n    //     const ndefRecords = tag.ndefMessage;\r\n\r\n    //     function decodeNdefRecord(record:any) {\r\n    //         if (Ndef.isType(record, Ndef.TNF_WELL_KNOWN, Ndef.RTD_TEXT)) {\r\n    //             return('text' + Ndef.text.decodePayload(record.payload));\r\n    //         } else if (Ndef.isType(record, Ndef.TNF_WELL_KNOWN, Ndef.RTD_URI)) {\r\n    //           onChangeText(Ndef.uri.decodePayload(record.payload));\r\n    //             checklogin(Ndef.uri.decodePayload(record.payload).toString());\r\n    //         }\r\n\r\n    //         return('unknown')\r\n    //     }\r\n\r\n    //     parsed = ndefRecords.map(decodeNdefRecord);\r\n    // }\r\n    // } catch (ex) {\r\n    //   alert('Oops!' + ex);\r\n    // } finally {\r\n    //   // stop the nfc scanning\r\n    //   NfcManager.cancelTechnologyRequest();\r\n    // }\r\n    checklogin(\"dotd.tech/card?id=5\");\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n             <StatusBar style=\"auto\" hidden={true}/>\r\n\r\n      <Image\r\n        style={styles.image}\r\n        source={{\r\n          uri: \"https://dotdstorage.blob.core.windows.net/logos/login.png\",\r\n        }}\r\n      ></Image>\r\n      <View\r\n        style={{\r\n          height: 350,\r\n          width: 300,\r\n          marginTop: 30,\r\n          marginLeft: 40\r\n        }}\r\n      >\r\n        <Text\r\n          style={{\r\n            color: \"black\",\r\n            fontSize: 25,\r\n            marginBottom: 30\r\n          }}\r\n        >\r\n          Discover {\"\\n\"}The science of networking.\r\n        </Text>\r\n        <Text style={{ color: \"black\", opacity: 50, fontSize: 20, marginBottom: 60}}>\r\n          Click the button below and follow thr instructions to set up the your card.\r\n        </Text>\r\n        <Pressable\r\n          style={{\r\n            backgroundColor: \"#052846\",\r\n            borderColor: \"white\",\r\n            width: 150,\r\n            height: 40,\r\n            borderRadius: 10,\r\n            borderWidth: 1,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={readNdef}\r\n        >\r\n          <Text style={{ color: \"white\", fontSize: 20 }}>Let's go</Text>\r\n        </Pressable>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    height: 1000,\r\n    backgroundColor: \"white\",\r\n  },\r\n  image: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderBottomLeftRadius: 40,\r\n    borderBottomRightRadius: 40,\r\n  },\r\n  input: {\r\n    backgroundColor: \"#052846\",\r\n    borderColor: \"white\",\r\n    width: 300,\r\n    height: 40,\r\n    borderRadius: 10,\r\n    borderWidth: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"white\",\r\n    padding: 10,\r\n    marginBottom: 75,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}