{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar S = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    height: 54,\n    borderTopWidth: 1,\n    borderTopColor: \"#E8E8E8\",\n    position: \"absolute\",\n    bottom: 25,\n    left: 20,\n    right: 20,\n    elevation: 10,\n    backgroundColor: \"rgba(233,233,233,0.85)\",\n    borderRadius: 50,\n    justifyContent: \"center\"\n  },\n  tabButton: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  activeTab: {\n    height: \"100%\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  activeTabInner: {\n    width: 48,\n    height: 48,\n    backgroundColor: \"#0156FE\",\n    borderRadius: 24\n  }\n});\n\nvar TabBar = function TabBar(props) {\n  var renderIcon = props.renderIcon,\n      activeTintColor = props.activeTintColor,\n      inactiveTintColor = props.inactiveTintColor,\n      onTabPress = props.onTabPress,\n      onTabLongPress = props.onTabLongPress,\n      getAccessibilityLabel = props.getAccessibilityLabel,\n      navigation = props.navigation;\n  var _navigation$state = navigation.state,\n      routes = _navigation$state.routes,\n      activeRouteIndex = _navigation$state.index;\n  var totalWidth = Dimensions.get(\"window\").width - 40;\n  var tabWidth = totalWidth / routes.length;\n\n  var _useState = useState(new Animated.Value(tabWidth)),\n      _useState2 = _slicedToArray(_useState, 1),\n      translateValue = _useState2[0];\n\n  var onTabBarPress = function onTabBarPress(route, routeIndex) {\n    onTabPress(route);\n    Animated.spring(translateValue, {\n      toValue: routeIndex * tabWidth,\n      velocity: 10,\n      useNativeDriver: true\n    }).start();\n  };\n\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      style: S.container,\n      children: [_jsx(View, {\n        children: _jsx(View, {\n          style: StyleSheet.absoluteFillObject,\n          children: _jsx(View, {\n            style: [S.activeTab, {\n              width: tabWidth\n            }],\n            children: _jsx(Animated.View, {\n              style: [S.activeTab, {\n                width: tabWidth,\n                transform: [{\n                  translateX: translateValue\n                }]\n              }],\n              children: _jsx(View, {\n                style: S.activeTabInner\n              })\n            })\n          })\n        })\n      }), routes.map(function (route, routeIndex) {\n        var isRouteActive = routeIndex === activeRouteIndex;\n        var tintColor = isRouteActive ? activeTintColor : inactiveTintColor;\n        return _jsx(TouchableOpacity, {\n          style: S.tabButton,\n          onPress: function onPress() {\n            onTabBarPress({\n              route: route\n            }, routeIndex);\n          },\n          onLongPress: function onLongPress() {\n            onTabLongPress({\n              route: route\n            });\n          },\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          children: renderIcon({\n            route: route,\n            focused: isRouteActive,\n            tintColor: tintColor\n          })\n        }, routeIndex);\n      })]\n    })\n  });\n};\n\nexport default TabBar;","map":{"version":3,"sources":["C:/Users/jules/Documents/dotd_final/components/TabBar.tsx"],"names":["React","useState","S","StyleSheet","create","container","flexDirection","height","borderTopWidth","borderTopColor","position","bottom","left","right","elevation","backgroundColor","borderRadius","justifyContent","tabButton","flex","alignItems","activeTab","activeTabInner","width","TabBar","props","renderIcon","activeTintColor","inactiveTintColor","onTabPress","onTabLongPress","getAccessibilityLabel","navigation","state","routes","activeRouteIndex","index","totalWidth","Dimensions","get","tabWidth","length","Animated","Value","translateValue","onTabBarPress","route","routeIndex","spring","toValue","velocity","useNativeDriver","start","absoluteFillObject","transform","translateX","map","isRouteActive","tintColor","focused"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Dimensions,\r\n  Animated,\r\n} from \"react-native\";\r\n\r\nconst S = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"row\",\r\n    height: 54,\r\n    borderTopWidth: 1,\r\n    borderTopColor: \"#E8E8E8\",\r\n    position: \"absolute\",\r\n    bottom: 25,\r\n    left: 20,\r\n    right: 20,\r\n    elevation: 10,\r\n    backgroundColor: \"rgba(233,233,233,0.85)\",\r\n    borderRadius: 50,\r\n    justifyContent: \"center\",\r\n  },\r\n  tabButton: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\r\n  activeTab: {\r\n    height: \"100%\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  activeTabInner: {\r\n    width: 48,\r\n    height: 48,\r\n    backgroundColor: \"#0156FE\",\r\n    borderRadius: 24,\r\n  },\r\n});\r\n\r\nconst TabBar = (props: any) => {\r\n  const {\r\n    renderIcon,\r\n    activeTintColor,\r\n    inactiveTintColor,\r\n    onTabPress,\r\n    onTabLongPress,\r\n    getAccessibilityLabel,\r\n    navigation,\r\n  } = props;\r\n\r\n  const { routes, index: activeRouteIndex } = navigation.state;\r\n  const totalWidth = Dimensions.get(\"window\").width - 40;\r\n  const tabWidth = totalWidth / routes.length;\r\n\r\n  const [translateValue] = useState(new Animated.Value(tabWidth));\r\n\r\n  const onTabBarPress = (route: any, routeIndex: any) => {\r\n    onTabPress(route); // function that will change the route;\r\n    Animated.spring(translateValue, {\r\n      toValue: routeIndex * tabWidth,\r\n      // The translateX value should change depending on the chosen route\r\n      velocity: 10,\r\n      useNativeDriver: true,\r\n    }).start(); // the animation that animates the active tab circle\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <View style={S.container}>\r\n        <View>\r\n          <View style={StyleSheet.absoluteFillObject}>\r\n            <View style={[S.activeTab, { width: tabWidth }]}>\r\n              <Animated.View\r\n                style={[\r\n                  S.activeTab,\r\n                  {\r\n                    width: tabWidth,\r\n                    transform: [{ translateX: translateValue }],\r\n                  },\r\n                ]}\r\n              >\r\n                <View style={S.activeTabInner} />\r\n              </Animated.View>\r\n            </View>\r\n          </View>\r\n        </View>\r\n        {routes.map((route: any, routeIndex: any) => {\r\n          const isRouteActive = routeIndex === activeRouteIndex;\r\n          const tintColor = isRouteActive ? activeTintColor : inactiveTintColor;\r\n\r\n          return (\r\n            <TouchableOpacity\r\n              key={routeIndex}\r\n              style={S.tabButton}\r\n              onPress={() => {\r\n                onTabBarPress({ route }, routeIndex);\r\n              }}\r\n              onLongPress={() => {\r\n                onTabLongPress({ route });\r\n              }}\r\n              accessibilityLabel={getAccessibilityLabel({ route })}\r\n            >\r\n              {renderIcon({ route, focused: isRouteActive, tintColor })}\r\n            </TouchableOpacity>\r\n          );\r\n        })}\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default TabBar;\r\n"]},"metadata":{},"sourceType":"module"}