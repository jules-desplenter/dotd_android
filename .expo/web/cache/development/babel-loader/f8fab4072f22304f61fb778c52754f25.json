{"ast":null,"code":"export default (function (matrix, size) {\n  var cellSize = size / matrix.length;\n  var path = '';\n  matrix.forEach(function (row, i) {\n    var needDraw = false;\n    row.forEach(function (column, j) {\n      if (column) {\n        if (!needDraw) {\n          path += \"M\" + cellSize * j + \" \" + (cellSize / 2 + cellSize * i) + \" \";\n          needDraw = true;\n        }\n\n        if (needDraw && j === matrix.length - 1) {\n          path += \"L\" + cellSize * (j + 1) + \" \" + (cellSize / 2 + cellSize * i) + \" \";\n        }\n      } else {\n        if (needDraw) {\n          path += \"L\" + cellSize * j + \" \" + (cellSize / 2 + cellSize * i) + \" \";\n          needDraw = false;\n        }\n      }\n    });\n  });\n  return {\n    cellSize: cellSize,\n    path: path\n  };\n});","map":{"version":3,"sources":["C:/Users/jules/Documents/dotd_final/node_modules/react-native-qrcode-svg/src/transformMatrixIntoPath.js"],"names":["matrix","size","cellSize","length","path","forEach","row","i","needDraw","column","j"],"mappings":"AAAA,gBAAe,UAACA,MAAD,EAASC,IAAT,EAAkB;AAC/B,MAAMC,QAAQ,GAAGD,IAAI,GAAGD,MAAM,CAACG,MAA/B;AACA,MAAIC,IAAI,GAAG,EAAX;AACAJ,EAAAA,MAAM,CAACK,OAAP,CAAe,UAACC,GAAD,EAAMC,CAAN,EAAY;AACzB,QAAIC,QAAQ,GAAG,KAAf;AACAF,IAAAA,GAAG,CAACD,OAAJ,CAAY,UAACI,MAAD,EAASC,CAAT,EAAe;AACzB,UAAID,MAAJ,EAAY;AACV,YAAI,CAACD,QAAL,EAAe;AACbJ,UAAAA,IAAI,UAAQF,QAAQ,GAAGQ,CAAnB,UAAwBR,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAGK,CAAlD,OAAJ;AACAC,UAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,YAAIA,QAAQ,IAAIE,CAAC,KAAKV,MAAM,CAACG,MAAP,GAAgB,CAAtC,EAAyC;AACvCC,UAAAA,IAAI,UAAQF,QAAQ,IAAIQ,CAAC,GAAG,CAAR,CAAhB,UAA8BR,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAGK,CAAxD,OAAJ;AACD;AACF,OARD,MAQO;AACL,YAAIC,QAAJ,EAAc;AACZJ,UAAAA,IAAI,UAAQF,QAAQ,GAAGQ,CAAnB,UAAwBR,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAGK,CAAlD,OAAJ;AACAC,UAAAA,QAAQ,GAAG,KAAX;AACD;AACF;AACF,KAfD;AAgBD,GAlBD;AAmBA,SAAO;AACLN,IAAAA,QAAQ,EAARA,QADK;AAELE,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CA1BD","sourcesContent":["export default (matrix, size) => {\r\n  const cellSize = size / matrix.length\r\n  let path = ''\r\n  matrix.forEach((row, i) => {\r\n    let needDraw = false\r\n    row.forEach((column, j) => {\r\n      if (column) {\r\n        if (!needDraw) {\r\n          path += `M${cellSize * j} ${cellSize / 2 + cellSize * i} `\r\n          needDraw = true\r\n        }\r\n        if (needDraw && j === matrix.length - 1) {\r\n          path += `L${cellSize * (j + 1)} ${cellSize / 2 + cellSize * i} `\r\n        }\r\n      } else {\r\n        if (needDraw) {\r\n          path += `L${cellSize * j} ${cellSize / 2 + cellSize * i} `\r\n          needDraw = false\r\n        }\r\n      }\r\n    })\r\n  })\r\n  return {\r\n    cellSize,\r\n    path\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}